from enum import Enum
from typing import Dict, List, Optional

from pydantic import BaseModel, Field, RootModel


class RoleEnum(str, Enum):
    system = "system"
    assistant = "assistant"
    user = "user"


class Message(BaseModel):
    role: RoleEnum = Field(
        description="Who wrote the message: [{}]".format(str(RoleEnum))
    )
    content: str = Field(description="The text of the message")


class TextDetectionHttpRequest(BaseModel):
    text: str = Field(
        example="Your email is test@ibm.com! Only the next instance of email will be processed. test@ibm.com. Your SSN is 123-45-6789."
    )


class TextDetectionResponse(BaseModel):
    start: int = Field(example=14)
    end: int = Field(example=26)
    detection: str = Field(example="Net.EmailAddress")
    detection_type: str = Field(example="pii")
    score: float = Field(example=0.8)


class GenerationDetectionHttpRequest(BaseModel):
    user_input: str = Field(
        example="This is my amazing prompt",
        description="prompt is the user input to the LLM",
    )
    generated_response: str = Field(
        example="Some text generated by an LLM",
        description="Generated response from the LLM",
    )


class GenerationDetectionResponse(BaseModel):
    detection_type: str = Field(example="faithfulness")
    score: float = Field(example=0.5)


class ChatDetectionHttpRequest(BaseModel):
    chat_history: List[Message] = Field(
        example=[
            Message(role=RoleEnum.system, content="You are a helpful assistant."),
            Message(role="user", content="Hi, is this powered by siri or alexa?"),
            Message(role=RoleEnum.assistant, content="Better, it's watsonx"),
            Message(role="user", content="This is awesome!"),
        ]
    )


class ContextBasedDetectionHttpRequest(GenerationDetectionHttpRequest):
    context_chunks: List[str] = Field(example=["One paragraph", "Long text of content"])
    documents_public_urls: Optional[List[str]] = Field(
        description="URLs of the content to be used",
        example=["https://en.wikipedia.org/wiki/IBM", "https://research.ibm.com/"],
    )


class AttributionBasedDetectionResponse(GenerationDetectionResponse):
    evidences: List[str] = Field(
        example=["Only the next instance of email will be processed"],
    )


# former to be able to keep testing
class DetectionHttpRequest(TextDetectionHttpRequest):
    parameters: Dict = Field(example={"threshold": 0.8})


class DetectionResponseSpan(TextDetectionResponse):
    text: str = Field(example="my bad text")


class DetectionResponse(BaseModel):
    detections: List[DetectionResponseSpan]


class Evidence(BaseModel):
    source: str = Field(
        title="Source",
        example="https://en.wikipedia.org/wiki/IBM",
        description="Source of the evidence, it can be url of the evidence etc",
    )


class EvidenceType(str, Enum):
    url = "url"
    title = "title"


class EvidenceObj(BaseModel):
    type: EvidenceType = Field(
        title="EvidenceType",
        example="url",
        description="Type field signifying the type of evidence provided. Example url, title etc",
    )
    evidence: Evidence = Field(
        description="Evidence object, currently only containing source, but in future can contain other optional arguments like id, etc",
    )


class ContentAnalysisHttpRequest(BaseModel):
    contents: List[str] = Field(
        min_length=1,
        title="Contents",
        description="Field allowing users to provide list of texts for analysis. Note, results of this endpoint will contain analysis / detection of each of the provided text in the order they are present in the contents object.",
        example=[
            "Your email is test@ibm.com! Only the next instance of email will be processed. test@ibm.com. Your SSN is 123-45-6789."
        ],
    )
    detector_params: Optional[Dict] = Field(
        description="Optional detector parameters, used on a per-detector basis"
    )


class ContentAnalysisResponse(BaseModel):
    start: int = Field(example=14)
    end: int = Field(example=26)
    text: str = Field(example="abc@def.com")
    detection: str = Field(example="Net.EmailAddress")
    detection_type: str = Field(example="pii")
    score: float = Field(example=0.8)
    evidences: Optional[List[EvidenceObj]] = Field(
        description="Optional field providing evidences for the provided detection",
        default=None,
    )


class ContentsAnalysisResponse(RootModel):
    root: List[List[ContentAnalysisResponse]] = Field(
        title="Response Text Content Analysis Unary Handler Api V1 Text Content Post"
    )


class Error(BaseModel):
    code: int
    message: str
