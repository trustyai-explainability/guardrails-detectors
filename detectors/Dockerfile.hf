FROM registry.access.redhat.com/ubi9/ubi-minimal as base
ENV LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib
ARG TARGETARCH

RUN microdnf update -y                                            && \
    microdnf install -y --nodocs                                     \
        python-pip python-devel                                   && \
    pip install --upgrade --no-cache-dir pip wheel                && \
    if [ "$TARGETARCH" = "ppc64le" ]; then                           \
        microdnf install -y --nodocs                                 \
            git gcc-toolset-13 rust cargo wget unzip              && \
        pip install --upgrade --no-cache-dir 'cmake<4'             ; \
    elif [ "$TARGETARCH" = "s390x" ]; then                           \
        microdnf install -y --nodocs                                 \
            git gcc-toolset-13 make wget unzip rust cargo            \
            gcc-gfortran python3-devel openblas-devel pkgconfig   && \
        pip install --upgrade --no-cache-dir 'cmake<4'               \
                                        setuptools wheel           ; \
    fi                                                            && \
    microdnf clean all


RUN if [ "$TARGETARCH" != "ppc64le" ] && [ "$TARGETARCH" != "s390x" ]; then \
        pip install --no-cache-dir torch                            ; \
    fi

# Buildinf torch for ppc64le
FROM base as torch-builder
USER root

ARG MAX_JOBS
ARG _GLIBCXX_USE_CXX11_ABI=1
ARG TARGETARCH

ENV TORCH_VERSION=2.6.0
ENV PATH="$HOME/.cargo/bin:$PATH"

RUN if [ "$TARGETARCH" = "ppc64le" ] || [ "$TARGETARCH" = "s390x" ]; then                \
    source /opt/rh/gcc-toolset-13/enable                                              && \
    git clone --recursive https://github.com/pytorch/pytorch.git -b v${TORCH_VERSION} && \
    cd pytorch && pip install -r requirements.txt                                     && \
    python setup.py develop                                                           && \
    rm -f dist/torch*+git*whl                                                         && \
    MAX_JOBS=${MAX_JOBS:-$(nproc)}                                                       \
    PYTORCH_BUILD_VERSION=${TORCH_VERSION} PYTORCH_BUILD_NUMBER=1 pip wheel . --wheel-dir /tmp/torchwheels/ ;\
fi

# Building openblas for ppc64le
FROM base AS openblas-builder

ARG TARGETARCH
ENV OPENBLAS_VERSION=0.3.30

WORKDIR /root

# Creating a directory for OpenBlas
RUN mkdir /tmp/openblas

RUN if [ "$TARGETARCH" = "ppc64le" ]; then                                                                                   \
    source /opt/rh/gcc-toolset-13/enable                                                                                  && \
    wget https://github.com/OpenMathLib/OpenBLAS/releases/download/v${OPENBLAS_VERSION}/OpenBLAS-${OPENBLAS_VERSION}.zip  && \
    unzip OpenBLAS-${OPENBLAS_VERSION}.zip -d /tmp/ && mv -T /tmp/OpenBLAS-${OPENBLAS_VERSION} /tmp/openblas              && \
    cd /tmp/openblas                                                                                                      && \
    make -j$(nproc) TARGET=POWER9 BINARY=64 USE_OPENMP=1 USE_THREAD=1 NUM_THREADS=120 DYNAMIC_ARCH=1 INTERFACE64=0         ; \
fi

# FROM icr.io/fm-stack/ubi9-minimal-py39-torch as builder
FROM base as builder
ARG TARGETARCH

# Install PyTorch for ppc64le
RUN --mount=type=bind,from=torch-builder,source=/tmp/,target=/wheels/,ro \
    if [ "$TARGETARCH" = "ppc64le" ] || [ "$TARGETARCH" = "s390x" ]; then \
        HOME=/root pip install /wheels/torchwheels/*.whl                ;\
    fi

# Install OpenBlas for ppc64le
COPY --from=openblas-builder /tmp/openblas/ /openblas
RUN if [ "$TARGETARCH" = "ppc64le" ]; then                               \
        PREFIX=/usr/local make -C /openblas install                     ;\
    fi

COPY ./common ./common
COPY ./huggingface/requirements.txt ./huggingface/requirements.txt
COPY ./huggingface/requirements.in ./huggingface/requirements.in
RUN if [ "$TARGETARCH" = "ppc64le" ] || [ "$TARGETARCH" = "s390x" ]; then \
       source /opt/rh/gcc-toolset-13/enable                            ; \
    fi                                                                && \
    pip install --no-cache-dir -r ./huggingface/requirements.in

RUN rm -rf /openblas && rm -rf /wheels

FROM builder

WORKDIR /app
ARG CACHEBUST=1
RUN echo "$CACHEBUST"
COPY ./common /common
COPY ./huggingface/app.py /app
COPY ./huggingface/detector.py /app

EXPOSE 8000
CMD ["uvicorn", "app:app", "--workers", "4", "--host", "0.0.0.0", "--port", "8000", "--log-config", "/common/log_conf.yaml"]

# gunicorn main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000
